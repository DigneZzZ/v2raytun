name: Update README with Latest and Pre-release Info

permissions:
  contents: write

on:
  release:
    types: [published, prereleased]
  push:
    branches:
      - main

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Get latest release info
        id: get_latest_release
        uses: actions/github-script@v3
        with:
          script: |
            const latestRelease = await github.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            core.setOutput('tag_name', latestRelease.data.tag_name);
            core.setOutput('html_url', latestRelease.data.html_url);
            core.setOutput('assets', JSON.stringify(latestRelease.data.assets.map(asset => ({
              name: asset.name,
              download_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/releases/latest/download/${asset.name}`
            }))));
            core.setOutput('prerelease', latestRelease.data.prerelease);

      - name: Update README.md
        run: |
          # Read the entire README.md content
          readme_content=$(cat README.md)

          # Extract the parts before and after the LATEST RELEASE section
          before_latest_release=$(echo "$readme_content" | awk '/<!-- LATEST RELEASE START -->/{exit}1')
          after_latest_release=$(echo "$readme_content" | awk '/<!-- LATEST RELEASE END -->/{flag=1; next} flag')

          # Extract the parts before and after the PRERELEASE section
          before_prerelease=$(echo "$readme_content" | awk '/<!-- PRERELEASE START -->/{exit}1')
          after_prerelease=$(echo "$readme_content" | awk '/<!-- PRERELEASE END -->/{flag=1; next} flag')

          # Create the new content for LATEST RELEASE section
          latest_release_section="<!-- LATEST RELEASE START -->\n"
          if [ "${{ steps.get_latest_release.outputs.prerelease }}" = "true" ]; then
            latest_release_section+="## Pre-release: ${{ steps.get_latest_release.outputs.tag_name }}\n"
            latest_release_section+="[View on GitHub](${{ steps.get_latest_release.outputs.html_url }})\n\n"
          else
            latest_release_section+="## Latest Release\n"
            latest_release_section+="[View on GitHub](https://github.com/${{ github.repository }}/releases/latest)\n\n"
          fi
          latest_release_section+="### Assets:\n"
          
          assets='${{ steps.get_latest_release.outputs.assets }}'
          echo $assets | jq -c '.[]' | while read i; do
            name=$(echo $i | jq -r '.name')
            url=$(echo $i | jq -r '.download_url')
            latest_release_section+="- [$name]($url)\n"
          done
          latest_release_section+="\n<!-- LATEST RELEASE END -->\n"

          # Combine the sections
          echo -e "$before_latest_release\n$latest_release_section$after_latest_release" > README.md

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "Update README with latest release info"
          git push
